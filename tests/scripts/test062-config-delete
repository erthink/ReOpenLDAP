#!/bin/bash
## $ReOpenLDAP$
## Copyright 1998-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. $SRCDIR/scripts/defines.sh

if [ ${AC_conf[syncprov]} = no ]; then
	echo "Syncrepl provider overlay not available, test skipped"
	exit 0
fi

CONFDIR=$TESTDIR/slapd.d
DBDIR=$TESTDIR/db
RCOUT=$TESTDIR/rcout
BGSEARCH=$TESTDIR/bg-search.out

mkdir -p $TESTDIR $CONFDIR $DBDIR

$SLAPPASSWD -g -n >$CONFIGPWF

#
# Test dynamic add/delete of syncprov overlay:
# - Create minimal back-conf setup
# - Add syncprov overlay to the cn=config database
# - Remove the overlay again
#

echo "Starting slapd on TCP/IP port $PORT1... $PWD"
config_filter $BACKEND ${AC_conf[monitor]} < $DYNAMICCONF > $CONFLDIF
$SLAPADD -F $CONFDIR -n 0 -l $CONFLDIF
RC=$?
if test $RC != 0 ; then
	echo "slapadd failed ($RC)!"
	killservers
	exit $RC
fi
cd $TESTDIR
$SLAPD -F ./slapd.d -h $URI1 -d $LVL $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"
cd $TESTWD
check_running 1

echo "Inserting syncprov overlay ..."
if [ ${AC_conf[syncprov]} = mod ]; then
	$LDAPADD -D cn=config -H $URI1 -y $CONFIGPWF <<EOF > $TESTOUT 2>&1
dn: cn=module,cn=config
objectClass: olcModuleList
cn: module
olcModulePath: $TESTWD/../servers/slapd/overlays
olcModuleLoad: syncprov.la
EOF
	RC=$?
	if test $RC != 0 ; then
		echo "ldapadd failed for moduleLoad ($RC)!"
		killservers
		exit $RC
	fi
fi
read CONFIGPW < $CONFIGPWF
$LDAPMODIFY -D cn=config -H $URI1 -y $CONFIGPWF <<EOF >> $TESTOUT 2>&1
dn: olcOverlay=syncprov,olcDatabase={0}config,cn=config
changetype: add
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
EOF

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed for syncrepl config ($RC)!"
	killservers
	exit $RC
fi

echo "Starting a refreshAndPersist search in background"
rm -f $RCOUT $BGSEARCH
(
  $LDAPSEARCH -D cn=config -H $URI1 -y $CONFIGPWF -bcn=config -E \!sync=rp >$BGSEARCH 2>&1
  RC=$?
  echo $RC > $RCOUT
  exit $RC
) &

SEARCHPID=$!

for i in 0.1 0.5 1 2 3 4 5; do
	if [ -s "$BGSEARCH" -o -e "$RCOUT" ]; then
		break
	else
		echo "Waiting $i seconds for RefreshAndPersist search to start ..."
		sleep $i
	fi
done

# LY: dummy search, just a serialize with background search.
$LDAPSEARCH -D cn=config -H $URI1 -y $CONFIGPWF -bcn=config > /dev/null 2>&1

echo "Removing syncprov overlay again ..."
$LDAPDELETE -D cn=config -H $URI1 -y $CONFIGPWF <<EOF >> $TESTOUT 2>&1
olcOverlay={0}syncprov,olcDatabase={0}config,cn=config
EOF
RC=$?

if [ $RC = 53 ]; then
	echo "Got 'Unwilling to perform ' (53)."
	echo "Assume CONFIG_DELETE feature disabled (configure --disable-experimental ?)"
	killpids $SEARCHPID
	killservers
	echo ">>>>> Test skipped"
	exit 0
fi

if test $RC != 0 ; then
	echo "ldapmodify failed for syncrepl config ($RC)!"
	killpids $SEARCHPID
	killservers
	exit $RC
fi

for i in 0.1 0.5 1 2 3 4 5; do
	if test -f "$RCOUT" ; then
		break
	else
		echo "Waiting $i seconds for RefreshAndPersist search to end ..."
		sleep $i
	fi
done

if test -f "$RCOUT" ; then
	safewait $SEARCHPID
	SEARCHRC=`cat $RCOUT`
	echo "Checking return code of backgrounded RefreshAndPersist search ..."
	if test 52 != "$SEARCHRC" ; then
		echo "Error: Backgrounded ldapsearch returned the wrong error code: $SEARCHRC"
		RC=1
	else
		echo "Exit code correct (52)."
	fi
else
	echo "Backgrounded ldapsearch did not exit after overlay removal."
	killpids $SEARCHPID
	RC=2
fi
if test $RC != 0 ; then
	killservers
	exit $RC
fi

echo -n "Running a refreshOnly search, should fail..."
for ((i=1; n<=50; i++)); do
	sleep 0.1
	$LDAPSEARCH -D cn=config -H $URI1 -y $CONFIGPWF -bcn=config -E \!sync=ro > $SEARCHOUT 2>&1
	RC=$?

	case $RC in
	53)
		# LY: workaround for very high cpu load.
		if [ $i = 1 ]; then
			echo "Got 'Unwilling to perform' (53)"
			echo "Assume very high CPU load, retry..."
		fi
		continue
		;;
	12)
		echo " Correct, in $(expr $i / 10).$(expr $i % 10) seconds"
		echo "Returns \"Critical extension is unavailable (12)\"."
		killservers
		echo ">>>>> Test succeeded"
		exit 0
		;;
	*)
		echo " Wrong ($RC), in $(expr $i / 10).$(expr $i % 10) seconds"
		echo "ldapsearch should have failed with Critical extension is unavailable (12)!"
		killservers
		exit $RC
		;;
	esac
done

echo " Timeout $(expr $i / 10) seconds"
killservers
exit $RC
