#!/bin/bash
## $ReOpenLDAP$
## Copyright 1998-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. ${TOP_SRCDIR}/tests/scripts/defines.sh

if test ${AC_conf[syncprov]} = no; then
	echo "Syncrepl provider overlay not available, test skipped"
	exit 0
fi
if test ${AC_conf[accesslog]} = no; then
        echo "Accesslog overlay not available, test skipped"
        exit 0
fi
if test ${AC_conf[dynlist]} = no; then
        echo "Dynlist overlay not available, test skipped"
        exit 0
fi
if test ${AC_conf[memberof]} = no; then
        echo "Memberof overlay not available, test skipped"
        exit 0
fi
if test $BACKEND = ldif ; then
        # Onelevel search does not return entries in order of creation or CSN.
        echo "$BACKEND backend unsuitable for syncprov logdb, test skipped"
        exit 0
fi

echo "This test tracks a case where changes are incorrectly skipped"
echo "See http://www.openldap.org/its/index.cgi/?findid=8444 for more information."

MMR=4
if [ -n "$CI" ]; then
	NNN=10
else
	NNN=42
fi

XDIR=$TESTDIR/srv

mkdir -p $TESTDIR

$SLAPPASSWD -g -n >$CONFIGPWF

ITS=8444
ITSDIR=$DATADIR/regressions/its$ITS
ITS8444_IGNORE_REASON="$CI"
[ -n "$CIBUZZ_PID4" ] && ITS8444_IGNORE_REASON="BUZZ"

echo "Initializing server configurations..."

KILLPIDS=
for ((n=1; n<=$MMR; n++)); do
	DBDIR=${XDIR}$n/db
	CFDIR=${XDIR}$n/slapd.d

	mkdir -p ${XDIR}$n $DBDIR.1 $DBDIR.2 $CFDIR
	DBNOSYNC=yes config_filter $BACKEND ${AC_conf[monitor]} < $ITSDIR/slapd-provider${n}.ldif > $CONFLDIF
	$SLAPADD -F $CFDIR -n 0 -l $CONFLDIF
	RC=$?
	if test $RC != 0 ; then
		echo "ldapadd(initial) failed ($RC)!"
		killservers
		exit $RC
	fi
done

for ((n=1; n<=$MMR; n++)); do
	MYURI=`eval echo '$URI'$n`
	MYLOG=`eval echo '$LOG'$n`
	CFDIR=${XDIR}$n/slapd.d

	echo "Starting provider slapd on TCP/IP URI $MYURI"
	$SLAPD_HUGE -F $CFDIR -h $MYURI -d $LVL $TIMING |& gzip > $MYLOG.gz &
	PID=$(jobs -p | tail -1)

	if test $WAIT != 0 ; then
		echo PID $PID
		read foo
	fi
	KILLPIDS="$PID $KILLPIDS"
	check_running $n
done

echo "Populating database on first provider..."
$LDAPADD -D $MANAGERDN -H $URI1 -w $PASSWD << EOMODS >> $TESTOUT 2>&1
dn: $BASEDN
objectClass: organization
objectClass: dcObject
o: Example, Inc.
dc: example

dn: ou=People,$BASEDN
objectClass: organizationalUnit
ou: People

dn: ou=Groups,$BASEDN
objectClass: organizationalUnit
ou: Groups

dn: cn=Roger Rabbit,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Roger Rabbit
sn: Rabbit

dn: cn=Baby Herman,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Baby Herman
sn: Herman

dn: cn=Jessica Rabbit,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Jessica Rabbit
sn: Rabbit

dn: cn=Bugs Bunny,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Bugs Bunny
sn: Bunny

dn: cn=Daffy Duck,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Daffy Duck
sn: Duck

dn: cn=Elmer Fudd,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Elmer Fudd
sn: Fudd

dn: cn=Cartoonia,ou=Groups,$BASEDN
objectClass: groupOfNames
cn: Cartoonia
member: cn=Roger Rabbit,ou=People,$BASEDN
member: cn=Baby Herman,ou=People,$BASEDN
EOMODS

RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	killservers
	exit $RC
fi

# wait for initial sync
for ((n=2; n<=$MMR; n++)); do
	PORT=`eval echo '$PORT'$n`
	wait_syncrepl $PORT1 $PORT base "" "-D $MANAGERDN -w $PASSWD"
done

echo "Checking initial consistency..."
for ((n=1; n<=$MMR; n++)); do
	PORT=`eval echo '$PORT'$n`
	URI=`eval echo '$URI'$n`

	echo "Using ldapsearch to read all the entries from server $n..."
	$LDAPSEARCH -S "" -b "$BASEDN" -D "$MANAGERDN" -H $URI -w $PASSWD  \
		'objectclass=*' > $TESTDIR/server$n.out 2>&1
	RC=$?

	if [ $RC != 0 ]; then
		echo "ldapsearch failed at server $n ($RC)!"
		killservers
		exit $RC
	fi
	$LDIFFILTER -s a < $TESTDIR/server$n.out > $TESTDIR/server$n.flt
done

for ((n=2; n<=$MMR; n++)); do
	echo "Comparing retrieved entries from server 1 and server $n..."
	$CMP $MASTERFLT $TESTDIR/server$n.flt > $CMPOUT
	RC=$?

	if [ $RC != 0 ]; then
		break
	fi
done

if [ $RC != 0 ]; then
	echo "test failed - server 1 and server $n databases differ"
	killservers
	[ -n "$ITS8444_IGNORE_REASON" ] \
		&& echo "$ITS8444_IGNORE_REASON: Ignore 8444-1 failure due a known todo4recovery://erased_by_github/erthink/ReOpenLDAP/issues/121" \
		|| exit 1
fi

echo "Looping $NNN times adding and deleting members to the Cartoonia group..."
for ((loop=1; loop<=$NNN; loop++)); do
	echo "Adding new members to the group (${loop}/$NNN)..."
	$LDAPMODIFY -H $URI1 \
	        -D "cn=Manager,$BASEDN" -w $PASSWD \
	        >> $TESTOUT 2>&1 << EOF
dn: cn=Cartoonia,ou=Groups,$BASEDN
changetype: modify
add: member
member: cn=Jessica Rabbit,ou=People,$BASEDN
member: cn=Elmer Fudd,ou=People,$BASEDN
member: cn=Daffy Duck,ou=People,$BASEDN
member: cn=Bugs Bunny,ou=People,$BASEDN
EOF
	RC=$?
	if test $RC != 0 ; then
		echo "ldapmodify(member-add) failed ($RC)!"
		killservers
		exit $RC
	fi
	for ((n=2; n<=$MMR; n++)); do
		PORT=`eval echo '$PORT'$n`
		wait_syncrepl $PORT1 $PORT base "" "-D $MANAGERDN -w $PASSWD"
	done

	echo "Checking that members have memberOf present..."
	new_members=( "cn=Jessica Rabbit,ou=People,$BASEDN" "cn=Elmer Fudd,ou=People,$BASEDN" "cn=Daffy Duck,ou=People,$BASEDN" "cn=Bugs Bunny,ou=People,$BASEDN")
	for member in "${new_members[@]}"; do
		for ((n=1; n<=$MMR; n++)); do
			>$SEARCHOUT
			echo "# Searching member $member after adding to Cartoonia group, provider $n" >> $SEARCHOUT
			MYURI=`eval echo '$URI'$n`
			$LDAPSEARCH -S "" -b "$member" -s base -H $MYURI -D "cn=manager,$BASEDN" -w $PASSWD \
			        '(objectClass=*)' 'memberOf' >> $SEARCHOUT 2>&1
			RC=$?
			if test $RC != 0 ; then
			        echo "ldapsearch failed ($RC) on consumer $n!"
				killservers
			        exit $RC
			fi

			grep "memberOf:" $SEARCHOUT >/dev/null 2>&1
			RC=$?
			if test $RC != 0 ; then
				echo "User add failed on consumer $n."
				[ -n "$ITS8444_IGNORE_REASON" ] \
					&& echo "$ITS8444_IGNORE_REASON: Ignore 8444-2 failure due a known todo4recovery://erased_by_github/erthink/ReOpenLDAP/issues/121" \
					|| (killservers; exit $RC)
			fi
		done
	done

	echo "Deleting new members from the group..."
	$LDAPMODIFY -H $URI1 \
	        -D "cn=Manager,$BASEDN" -w $PASSWD \
	        >> $TESTOUT 2>&1 << EOF
dn: cn=Cartoonia,ou=Groups,$BASEDN
changetype: modify
delete: member
member: cn=Jessica Rabbit,ou=People,$BASEDN
member: cn=Elmer Fudd,ou=People,$BASEDN
member: cn=Daffy Duck,ou=People,$BASEDN
member: cn=Bugs Bunny,ou=People,$BASEDN
EOF
	RC=$?
	if test $RC != 0 ; then
		echo "ldapmodify(member-delete) failed ($RC)!"
		killservers
		exit $RC
	fi
	for ((n=2; n<=$MMR; n++)); do
		PORT=`eval echo '$PORT'$n`
		wait_syncrepl $PORT1 $PORT base "" "-D $MANAGERDN -w $PASSWD"
	done

	echo "Searching new members to see if they still have memberOf present..."
	new_members=( "cn=Jessica Rabbit,ou=People,$BASEDN" "cn=Elmer Fudd,ou=People,$BASEDN" "cn=Daffy Duck,ou=People,$BASEDN" "cn=Bugs Bunny,ou=People,$BASEDN")
	for member in "${new_members[@]}"; do
		for ((n=1; n<=$MMR; n++)); do
			>$SEARCHOUT
			echo "# Searching member $member after removal from Cartoonia group, provider $n" >> $SEARCHOUT
			MYURI=`eval echo '$URI'$n`
			$LDAPSEARCH -S "" -b "$member" -s base -H $MYURI -D "cn=manager,$BASEDN" -w $PASSWD \
			        '(objectClass=*)' 'memberOf' >> $SEARCHOUT 2>&1
			RC=$?

			if test $RC != 0 ; then
			        echo "ldapsearch failed ($RC) on consumer $n!"
				killservers
			        exit $RC
			fi

			grep "memberOf:" $SEARCHOUT >/dev/null 2>&1
			RC=$?
			if test $RC != 1 ; then
				echo "User delete failed on consumer $n."
				[ -n "$ITS8444_IGNORE_REASON" ] \
					&& echo "$ITS8444_IGNORE_REASON: Ignore 8444-3 failure due a known todo4recovery://erased_by_github/erthink/ReOpenLDAP/issues/121" \
					|| (killservers; exit 1)
			fi
		done
	done
done

echo "Looping $NNN times deleting and adding Cartoonia group..."
for ((loop=1; loop<=$NNN; loop++)); do
	>$SEARCHOUT
	echo "Running ldapdelete to remove a group (${loop}/$NNN)..."
	$LDAPMODIFY -H $URI1 \
	        -D "cn=Manager,$BASEDN" -w $PASSWD \
	        >> $TESTOUT 2>&1 << EOF
dn: cn=Cartoonia,ou=Groups,$BASEDN
changetype: delete
EOF

	RC=$?
	if test $RC != 0 ; then
		echo "ldapmodify(group-delete) failed ($RC)!"
		killservers
		exit $RC
	fi
	for ((n=2; n<=$MMR; n++)); do
		PORT=`eval echo '$PORT'$n`
		wait_syncrepl $PORT1 $PORT base "" "-D $MANAGERDN -w $PASSWD"
	done

	echo "Searching entire database on each provider after deleting Cartoonia group"

	for ((n=1; n<=$MMR; n++)); do
		echo "# Searching the entire database after deleting Cartoonia, provider $n" >> $SEARCHOUT
		MYURI=`eval echo '$URI'$n`
		$LDAPSEARCH -S "" -b "$BASEDN" -H $MYURI -D "cn=manager,$BASEDN" -w $PASSWD \
		        '(objectClass=*)' '*' >> $SEARCHOUT 2>&1
		RC=$?
		if test $RC != 0 ; then
		        echo "ldapsearch failed ($RC)!"
			killservers
		        exit $RC
		fi
	done

	grep "cn=Cartoonia" $SEARCHOUT >/dev/null 2>&1
	RC=$?
	if test $RC != 1 ; then
		echo "Group delete failed on one or more consumer ($RC)."
		[ -n "$ITS8444_IGNORE_REASON" ] \
			&& echo "$ITS8444_IGNORE_REASON: Ignore 8444-4 failure due a known todo4recovery://erased_by_github/erthink/ReOpenLDAP/issues/121" \
			|| (killservers; exit 1)
	fi

	echo "Running ldapmodify to add the group back..."
	$LDAPMODIFY -H $URI1 \
	        -D "cn=Manager,$BASEDN" -w $PASSWD \
	        >> $TESTOUT 2>&1 <<EOF
dn: cn=Cartoonia,ou=Groups,$BASEDN
changetype: add
objectClass: groupOfNames
cn: Cartoonia
member: cn=Roger Rabbit,ou=People,$BASEDN
member: cn=Baby Herman,ou=People,$BASEDN
EOF

	RC=$?
	if test $RC != 0 ; then
		echo "ldapmodify(group-add) failed ($RC)!"
		killservers
		exit $RC
	fi
	for ((n=2; n<=$MMR; n++)); do
		PORT=`eval echo '$PORT'$n`
		wait_syncrepl $PORT1 $PORT base "" "-D $MANAGERDN -w $PASSWD"
	done

	echo "Searching entire database on each provider after re-adding Cartoonia group"

	for ((n=1; n<=$MMR; n++)); do
		>$SEARCHOUT
		echo "# Searching the entire database after re-adding Cartoonia, provider $n" >> $SEARCHOUT
		MYURI=`eval echo '$URI'$n`
		$LDAPSEARCH -S "" -b "$BASEDN" -H $MYURI -D "cn=manager,$BASEDN" -w $PASSWD \
		        '(objectClass=*)' '*' memberOf>> $SEARCHOUT 2>&1
		RC=$?
		if test $RC != 0 ; then
		        echo "ldapsearch failed ($RC)!"
			killservers
		        exit $RC
		fi

		grep "memberOf:" $SEARCHOUT >/dev/null 2>&1
		RC=$?
		if test $RC != 0 ; then
			echo "Group add failed on one or more consumer ($RC)."
			[ -n "$ITS8444_IGNORE_REASON" ] \
				&& echo "$ITS8444_IGNORE_REASON: Ignore 8444-5 failure due a known todo4recovery://erased_by_github/erthink/ReOpenLDAP/issues/121" \
				|| (killservers; exit $RC)
		fi
	done
done

killservers
echo ">>>>> Test succeeded"
exit 0
