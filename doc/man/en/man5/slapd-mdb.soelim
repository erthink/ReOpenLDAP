.\" $ReOpenLDAP$
.\" Copyright 1992-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
.\" All rights reserved.
.\"
.\" This file is part of ReOpenLDAP.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted only as authorized by the OpenLDAP
.\" Public License.
.\"
.\" A copy of this license is available in the file LICENSE in the
.\" top-level directory of the distribution or, alternatively, at
.\" <http://www.OpenLDAP.org/license.html>.

.TH SLAPD-MDB 5 "@RELEASE_DATE@" "ReOpenLDAP @VERSION@"

.SH NAME
slapd\-mdb \- ReOpenLDAP's reliable Memory-Mapped DB backend to slapd

.SH SYNOPSIS
.B @SYSCONFDIR@/slapd.conf

.SH DESCRIPTION
In the ReopenLDAP \fBmdb\fP backend
.BR slapd (8)
uses Extended Lightning Memory-Mapped Data Base (\fBlibmdbx\fP) library to store data.
It relies completely on the underlying operating system for memory
management and does no caching of its own. It is the recommended
primary database backend.
.LP
The \fBmdb\fP backend is similar to the \fBhdb\fP backend in that
it uses a hierarchical database layout which
supports subtree renames. It is both more space-efficient and more
execution-efficient than the \fBbdb\fP backend, while being overall
much simpler to manage.
.SH BENEFITS AND DRAWBACKS
When providing concurrent access, \fBmdb\fP behaves in full accord with
the MVCC (MultiVersion Concurrency Control) model. Therefore, \fBmdb\fP
ensures the best possible performance and can be easily scaled over
CPU cores upon read operations. But, with a lot of changes being made
over a short span of time, it may suffer from some weaknesses that
have to be addressed in corresponding usecases.
.LP
For instance, following by the MVCC, for every completed write
operation (transaction), \fBmdb\fP creates a separate logical
copy of all the internal structures and indexes. In doing so,
it puts all updates, including the tiniest one, into new database
blocks (pages), copy ones by demand. But the existing
pages that are not being changed will be shared with previous transactions.
For a large LDAP-database with multiple indexes, even one modify
operation can lead to tens, if not hundreds, of changed and copied pages.
So, compared with other backends and databases, \fBmdb\fP may generate
a considerably greater disk write traffic.
.LP
Blocks (pages) occupied by data are always associated with a certain
range of database versions resulting from completed write transactions.
Such occupied blocks (pages) can be freed and reused
only if there are no pending read operations that are using the
database version snapshots in question. Hence, long-lasting read operations
suspend the release and reuse of blocks (pages)
occupied by old data. So, a combination of slow reading and a rapid
flow of changes may lead to consumption of all available database space,
making it temporarily impossible to change any data.
.LP
The problem of a \fBmdb\fP overflow is especially relevant
for a scenario in which a large amount of data is retrieved
and then transferred over a slow network. To address that,
a special mechanism was implemented in version 2.4.41 of the
original OpenLDAP project that restarted read operations
while waiting for network operations to complete. However,
it proved to be insufficient for high-load commercial applications.
So, some additional mechanisms were implemented in ReOpenLDAP
to overcome this and the above mentioned drawbacks.
.SH CONFIGURATION
These
.B slapd.conf
options apply to the \fBmdb\fP backend database.
That is, they must follow a "database mdb" line and
come before any subsequent "backend" or "database" lines.
Other database options are described in the
.BR slapd.conf (5)
manual page.
.TP
.BI checkpoint \ <kbyte>\ <sec>
Specify the frequency for flushing the database disk buffers.
This setting is helpful when using the \fBdbnosync\fP option
or the \fBnosync\fR, \fBlazysync\fR, \fBnometasync\fR and \fBmapasync\fR flags
in the \fBenvflags\fR option. Otherwise, flushing
is done every time a write operation (transaction) is completed;
generating any additional checkpoints makes no sense.
The checkpoint will occur if either \fI<kbyte>\fP data has been written or
\fI<min>\fP minutes have passed since the last checkpoint.
Both arguments default to zero, in which case they are ignored. When
the \fI<min>\fP argument is non-zero, an internal task will run every
\fI<min>\fP minutes to perform the checkpoint.
.RS
.LP
Note1:
ReOpenLDAP ensures that the data on the disk is consistent,
regardless of which mode is enabled by the \fBnosync\fR option's flags.
With the original OpenLDAP project, there is a chance that the database
may be corrupted in some scenarios when \fBwritemap\fR is combined
with \fBnosync\fR, \fBnometasync\fR and \fBmapasync\fR.
However, PLEASE NOTE, in \fBnosync\fR, \fBlazysync\fR and \fBnometasync\fR modes
after abnormal (disaster) shutdown \fBlibmdbx\fP storage engine will rollback all
changes to the last commit checkpoint on disk,
formed in accordance with the parameters of \fBcheckpoint\fR option.
Accordingly, if \fBcheckpoint\fR is not used, it may be lost
all changes after the last regular (non disaster) shutdown of \fBslapd\fR.
.LP
Note2:
ReOpenLDAP implements support for the \fI<kbyte>\fP setting. The data
amount in this case is the total size of pages that have been changed within \fBmdb\fP.
However, the original OpenLDAP project still doesn't handle this setting at the moment.
.LP
Note3:
ReOpenLDAP interprets the \fI<min>\fP value in different ways depending on the mode defined
by the \fBreopenldap\fR option's flags. If the \fIiddqd\fP flag is set,
the specified value is interpreted as an interval in seconds, not in minutes.
With a lot of changes made shortly one after another, a second-based interval
helps make the load on the storage subsystem even and reduce the amount of loss
in case of a system-wide failure.
.RE
.TP
.B dbnosync
Specify that on-disk database contents should not be immediately
synchronized with in memory changes.
Enabling this option may improve performance at the expense of data
security. In particular, if the operating system crashes before changes are
flushed, some number of transactions may be lost.
By default, a full data flush/sync is performed when each
transaction is committed.
.TP
.BI directory \ <directory>
Specify the directory where the MDBX-files containing this database and
associated indexes live.
A separate directory must be specified for each database.
The default is
.BR @LOCALSTATEDIR@/reopenldap\-data .
.TP
.BI dreamcatcher \ <lag>\ <percentage>
Manage restarts of long-lasting read operations that
make it impossible to free and reuse pages used
in older database version snapshots (results of past write transactions) in the \fBlibmdbx\fP.
With a lot of changes being made in a short span of time, such operations
can lead to consumption of all available space in the database and a failure.
The first parameter called \fI<lag>\fP specifies a transaction lag threshold which,
when reached, triggers a read operation restart; if it is zero,
dreamcatcher is off. Another parameter called \fI<percentage>\fP specifies
a database space consumption threshold as a percentage which, when reached,
activates dreamcatcher; if it is zero, dreamcatcher is always on.
.RS
.LP
Note1:
\fBdreamcatcher\fR cannot ensure full protection against
database overflows due to the way queries are handled in
\fBslapd\fR; \fBoom\-handler\fR \fIyield\fP should be used instead.
.LP
Note2:
\fBdreamcatcher\fR is available only in ReOpenLDAP and is not available in the original OpenLDAP.
.RE
.TP
.BI oom\-handler \ [kill]\ [yield]
Manage behavior where executing a data change query leads to
consuming all the available pages,
but there are pages which cannot be freed and reused because of
concurrent read operations.
.RS
.TP
.B kill
Turn on kill mode. If a read operation is being executed by another process (not by
\fBslapd\fR itself), SIGKILL is sent to such a locking process.
The mdb_copy utility started to copy a large database is an example of such
external locking process.
This mode does not affect the operations within \fBslapd\fR.
.RE
.TP
.RS
.TP
.B yield
Turn on yield mode. Rather than terminating, \fBmdb\fP will wait for concurrent operations
that make it impossible to free and
reuse old data pages (results of past write transactions)
to finish.
.RE
.RS
.LP
Note1:
\fBoom\-handler\fR \fIyield\fP should be used together
with \fBdreamcatcher\fR, which ensures protection against quick database overflows
and minimizes pauses caused by waiting.
.LP
Note2:
\fBoom\-handler\fR is available only in ReOpenLDAP and is not available in the original OpenLDAP.
.RE
.TP
.TP
.BI envflags \ [nosync]\ [lazysync]\ [nometasync]\ [writemap]\ [mapasync]\ [nordahead]\ [lifo]\ [coalesce]
Specify flags for finer-grained control of the \fBlibmdbx\fP operation.
Note: The above flags for \fBenvflags\fR should be defined in slapd.conf without
any brackets or commas, using spaces or tabs as separators.
.RS
.TP
.B nosync
This is exactly the same as the
.IR dbnosync .
directive.
.RE
.RS
.TP
.B lazysync
Will be described later. Please see Russian man page.
.RE
.RS
.TP
.B nometasync
Flush the data on a commit, but skip the sync of the meta page. This mode is
slightly faster than doing a full sync, but can potentially lose the last
committed transaction if the operating system crashes. If both
.I nometasync
and
.I nosync
are set, the
.I nosync
flag takes precedence.
.RE
.RS
.TP
.B writemap
Use a writable memory map instead of just read-only. This speeds up write operations
but makes the database vulnerable to corruption in case any bugs in slapd
cause stray writes into the mmap region.
.RE
.RS
.TP
.B mapasync
When using a writable memory map and performing flushes on each commit, use an
asynchronous flush instead of a synchronous flush (the default). This option
has no effect if
.I writemap
has not been set. It also has no effect if
.IR nosync
is set.
.RE
.RS
.TP
.B nordahead
Turn off file readahead. Usually the OS performs readahead on every read
request. This usually boosts read performance but can be harmful to
random access read performance if the system's memory is full and the DB
is larger than RAM. This option is not implemented on Windows.
.RE
.RS
.TP
.B lifo
Turn on LIFO (reverse) internal reclaiming within \fBlibmdbx\fP garbage collector.
Consequently, it is most likely
that the set of pages in use recurs from transaction to transaction.
This, in turn, makes it possible for the storage subsystem
to use the internal caching and writeback mechanisms efficiently,
putting such recurring operations together. As a result,
the overall performance may improve, with the actual load on
the storage subsystem (disks) being reduced.
The \fIlifo\fP mode is available only in ReOpenLDAP and
is not available in the original OpenLDAP.
.RE
.RS
.TP
.B coalesce
Turn on coagulation of entries within \fBlibmdb\fP garbage collector (merging the lists of
free pages), which reduces the amount of internal indexes and the number of pages
updated upon any changes. As a result, the load on the storage subsystem
diminishes slightly in most scenarios.
The \fIcoalesce\fP mode is available only in ReOpenLDAP and
is not available in the original OpenLDAP.
.RE
.TP
\fBindex \fR{\fI<attrlist>\fR|\fBdefault\fR} [\fBpres\fR,\fBeq\fR,\fBapprox\fR,\fBsub\fR,\fI<special>\fR]
Specify the indexes to maintain for the given attribute (or
list of attributes).
Some attributes only support a subset of indexes.
If only an \fI<attrlist>\fP is given, the indices specified for \fBdefault\fR
are maintained.
Note that setting a default does not imply that all attributes will be
indexed. Also, for best performance, an
.BR eq
index should always be configured for the
.B objectClass
attribute.

A number of special index parameters may be specified.
The index type
.B sub
can be decomposed into
.BR subinitial ,
.B subany ,\ and
.BR subfinal
indices.
The special type
.BR nolang
may be specified to disallow use of this index by language subtypes.
The special type
.BR nosubtypes
may be specified to disallow use of this index by named subtypes.
Note: changing \fBindex\fP settings in
.BR slapd.conf (5)
requires rebuilding indices, see
.BR slapindex (8);
changing \fBindex\fP settings
dynamically by LDAPModifying "cn=config" automatically causes rebuilding
of the indices online in a background task.
.TP
.BI maxentrysize \ <bytes>
Specify the maximum size of an entry in bytes. Attempts to store
an entry larger than this size will be rejected with the error
LDAP_ADMINLIMIT_EXCEEDED. The default is 0, which is unlimited.
.TP
.BI maxreaders \ <integer>
Specify the maximum number of threads that may have concurrent read access
to the database. Tools such as slapcat count as a single thread,
in addition to threads in any active slapd processes. The
default is 61.
.TP
.BI maxsize \ <bytes>
Specify the maximum size of the database in bytes. A memory map of this
size is allocated at startup time and the database will not be allowed
to grow beyond this size. The default is 10485760 bytes. This setting
may be changed upward if the configured limit needs to be increased.

Note: It is important to set this to as large a value as possible,
(relative to anticipated growth of the actual data over time) since
growing the size later may not be practical when the system is under
heavy load.
.TP
.BI mode \ <integer>
Specify the file protection mode that newly created database
files should have.
The default is 0600.
.TP
\fBmultival \fR{\fI<attrlist>\fR|\fBdefault\fR} \fI<integer hi>\fR,\fI<integer lo>
Specify the number of values for which a multivalued attribute is
stored in a separate table. Normally entries are stored as a single
blob inside the database. When an entry gets very large or contains
attributes with a very large number of values, modifications on that
entry may get very slow. Splitting the large attributes out to a separate
table can improve the performance of modification operations.
The threshold is specified as a pair of integers. If the number of
values exceeds the hi threshold the values will be split out. If
a modification deletes enough values to bring an attribute below
the lo threshold the values will be removed from the separate
table and merged back into the main entry blob.
The threshold can be set for a specific list of attributes, or
the default can be configured for all other attributes.
The default value for both hi and lo thresholds is UINT_MAX, which keeps
all attributes in the main blob.
.TP
.BI rtxnsize \ <entries>
Specify the maximum number of entries to process in a single read
transaction when executing a large search. Long-lived read transactions
prevent old database pages from being reused in write transactions, and
so can cause significant growth of the database file when there is
heavy write traffic. This setting causes the read transaction in
large searches to be released and reacquired after the given number
of entries has been read, to give writers the opportunity to
reclaim old database pages. The default is 10000.
.TP
.BI searchstack \ <depth>
Specify the depth of the stack used for search filter evaluation.
Search filters are evaluated on a stack to accommodate nested AND / OR
clauses. An individual stack is assigned to each server thread.
The depth of the stack determines how complex a filter can be
evaluated without requiring any additional memory allocation. Filters that
are nested deeper than the search stack depth will cause a separate
stack to be allocated for that particular search operation. These
allocations can have a major negative impact on server performance,
but specifying too much stack will also consume a great deal of memory.
Each search stack uses 512K bytes per level. The default stack depth
is 16, thus 8MB per thread is used.
.SH ACCESS CONTROL
The
.B mdb
backend honors access control semantics as indicated in
.BR slapd.access (5).
.SH FILES
.TP
.B @SYSCONFDIR@/slapd.conf
default
.B slapd
configuration file
.SH SEE ALSO
.BR libmdbx (https://gitflic.ru/project/erthink/libmdbx),
.BR slapd.conf (5),
.BR slapd\-config (5),
.BR slapd (8),
.BR slapadd (8),
.BR slapcat (8),
.BR slapindex (8),
ReOpenLDAP MDBX documentation.
.SH ACKNOWLEDGEMENTS
.so ../Project
Written by Howard Chu.
ReOpenLDAP portion written (in Russian) by Leonid Yuriev and translated by Sergey Chernin.
