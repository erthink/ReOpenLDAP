Things for 2.5:
[09:27] <hyc> we also need to audit all of these schema defs
[09:27] <hyc> we're supposed to have official, non-experimental OIDs for released schema
[09:28] <hyc> accesslog is still using 666, experimental arc
[09:29] <hyc> I think this means we should polish up the logschema draft, Informational status, and publish it again as final

[13:57] <hyc> there's a nagging problem though, pcache's entry_release function needs to distinguish between its backend actually freeing the entry, or being a no-op
[13:57] <hyc> so it can decide whether to return success or continue
[13:58] <hyc> the patch to translucent sidesteps the question, by avoiding other overlays
[13:58] <hyc> but we need to revisit this in 2.5

  ITS#7920 fix for slapacl This needs to be streamlined in 2.5, current tool API is a mess.

ITS#7926 - [18:19] <hyc> this is going to be a WONTFIX for 2.4, I think
[18:20] <hyc> reiniting the listeners array is probably too much of a pain. it will screw with all currently open connections

[10:22] <hyc> and rewriting Bind and Exop result handling
[10:22] <hyc> so that it's no longer a special case for overlays

[23:34] <hyc> ok, so far heap profile shows that memory use during refresh is normal
[23:35] <hyc> not wonderful, but normal. mem usage grows because we're recording the present list while receiving entries in the refresh
[23:36] <hyc> I'm seeing for 1.2GB of data about 235MB of presentlist
[23:36] <hyc> which is pretty awful, considering presentlist is just a list of UUIDs
[23:36] <hyc> being stored in an avl tree
[23:37] <hyc> a btree would have been better here, and we could just use an unsorted segmented array
[23:42] <hyc> for the accumulation phase anyway. we need to be able to lookup records during the delete pphase
[00:05] <hyc> this stuff seriously needs a rewrite
[01:13] <hyc> 2.8M records x 16 bytes per uuid so this should be no more than 48MB of overhead
[01:13] <hyc> and instead it's 3-400MB

<hyc> we need to merge the rest of Ondrej's slapmodify/slapdelete patches
<hyc> get lmdb incremental backup working
<hyc> I need to publish a spec for PREPARE/2-phase commit in LDAP TXNs and integrate that into lmdb and back-mdb

Update slapo-unique to have an option to disable manageDSAit (ITS#8245)

Leftover bits from ITS#8294 -- Drop custom SHA2 code, use default crypto library SHA2 functions instead
  May need to document minimum crypto library version requirements
  Can also include sha2.c in slapd-sha2.c and make everything static

Matching rules for olc* attrs, see also ITS#8341

New syslog engine

[12:45] <hyc> I meant regcomp and regexec
[12:45] <hyc> mainly - compile a pattern, then fill in substitution parameters later
[12:46] <hyc> yes but the idea is still based on numbered substitution parameters
[12:47] <hyc> it's a pretty obvious approach, and with regex, time-tested.
[12:48] <hyc> I may try to sneak it into OpenLDAP 2.5


Overhaul overlays and backends, see ITS 6166

(In relation to a discussion about slapo-chain)
<hyc> anyway, the nicer ting to fix would be in 2.5, push all of the repl consumer code into its own overlay
<hyc> in that case, updateref would be processed wherever the overlay was configured
<hyc> so no longer tied to the frontend
<hyc> it would also make it more feasible to have multiple different consumer configs in a single DB, each with their own provider URL (and thus their own updateref)
<hyc> I would think we can get rid of the update ref directive entirely, just point all writes to that consumer's provider.

Update dynlist so it works with search filters, so that autogroup can be deleted
